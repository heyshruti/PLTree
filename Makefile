CC = gcc
CFLAGS = -Wall

TARFILES = Makefile scanner.mll parser.mly ast.mli calc.ml

OBJS = parser.cmo scanner.cmo calc.cmo
ALLOBJS = ast.cmo cast.cmo sast.cmo parser.cmo scanner.cmo compile.cmo execute.cmo pltree.cmo

calc : $(OBJS)
	ocamlc -o calc $(OBJS)

pltree: $(ALLOBJS)
	ocamlc -o pltree $(ALLOBJS)

scanner.ml : scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli : parser.mly
	ocamlyacc parser.mly

%.cmo : %.ml
	ocamlc -c $<

%.cmi : %.mli
	ocamlc -c $<


.PHONY : menhir
menhir:
	menhir -v parser.mly

.SECONDARY:

%: %.o tree.o
	$(CC) $(CFLAGS) -o $@ $< tree.o

%.o: %.c tree.h
	$(CC) $(CFLAGS) -c $< -o $@

%.c: %.tree pltree
	cat $< | ./pltree -c > $@

calculator.tar.gz : $(TARFILES)
	cd .. && tar zcf calculator/calculator.tar.gz $(TARFILES:%=calculator/%)

.PHONY : clean
clean :
	rm -f calc pltree parser.ml parser.mli scanner.ml
	rm -f *.cmo *.cmi hello hello.c tree tree.o hello.o
	rm -f *.automaton *.conflicts

# Generated by ocamldep *.ml *.mli
ast.cmo :
ast.cmx :
ast_temp.cmo :
ast_temp.cmx :
calc.cmo : parser.cmi ast.cmo
calc.cmx : parser.cmx ast.cmx
compile.cmo : sast.cmo ast.cmo
compile.cmx : sast.cmx ast.cmx
execute.cmo : ast.cmo
execute.cmx : ast.cmx
parser.cmo : ast.cmo parser.cmi
parser.cmx : ast.cmx parser.cmi
pltree.cmo : parser.cmi execute.cmo compile.cmo ast.cmo
pltree.cmx : parser.cmx execute.cmx compile.cmx ast.cmx
read.cmo : parser.cmi ast.cmo
read.cmx : parser.cmx ast.cmx
sast.cmo :
sast.cmx :
parser.cmi : ast.cmo
